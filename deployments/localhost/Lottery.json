{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gaslane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionID",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Er_NotEnoughETH_ENTERED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LotteryNOTOPEN",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numCustomers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryState",
          "type": "uint256"
        }
      ],
      "name": "UPKEEPNOTREQUIRED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "customer",
          "type": "address"
        }
      ],
      "name": "LotteryEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestID",
          "type": "uint256"
        }
      ],
      "name": "RequestLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepRequired",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCustomer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xda68cc836ec77a6530d5201f75e34b709b848535cf7ff31dabcd8ac9aa521b01",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1201975",
    "logsBloom": "0x
    "blockHash": "0x59703524b3327ac26575243feddc4ddb9baff6cb0957b94fa150963c55363ec4",
    "transactionHash": "0xda68cc836ec77a6530d5201f75e34b709b848535cf7ff31dabcd8ac9aa521b01",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1201975",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "a10a76eff9e3b7e63679583bb2509073",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gaslane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionID\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Er_NotEnoughETH_ENTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LotteryNOTOPEN\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numCustomers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryState\",\"type\":\"uint256\"}],\"name\":\"UPKEEPNOTREQUIRED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"customer\",\"type\":\"address\"}],\"name\":\"LotteryEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"}],\"name\":\"RequestLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepRequired\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCustomer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n//Enter lottery\\n\\n//pick random number\\n\\n//Winner selected at x minutes\\n\\npragma solidity ^0.8.8;\\n\\n//chainlink VRF \\ufffd\\ufffd\\ufffd\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror TransferFailed();\\nerror LotteryNOTOPEN();\\nerror Er_NotEnoughETH_ENTERED();\\n\\nerror UPKEEPNOTREQUIRED(\\n    uint256 currentBalance,\\n    uint256 numCustomers,\\n    uint256 lotteryState\\n);\\n\\n/*\\n */\\n\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    enum LotteryState {\\n        OPEN,\\n        CACULATE\\n    }\\n\\n    //variables.....\\n    uint256 private immutable immut_entranceFee;\\n    address payable[] private s_customers; //s_player => s_customer\\n\\n    VRFCoordinatorV2Interface private immutable immut_vrfCoordinator;\\n    bytes32 private immutable immut_gaslane;\\n    uint64 private immutable immut_subscriptionID;\\n    uint16 private constant REQEUST_CONFIRMATIONS = 3;\\n    uint32 private immutable immut_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1; //how many random numbers\\n\\n    //Lotter Variables\\n    address private stored_recentWinner;\\n    LotteryState private stored_lotteryState;\\n    uint256 private stored_lastTime;\\n    uint256 private immutable immut_interval;\\n\\n    //\\ufffd\\u033a\\ufffd\\u01ae \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\n    event LotteryEnter(address indexed customer);\\n    event RequestLotteryWinner(uint256 indexed requestID);\\n    event WinnerPicked(address indexed winner);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 entranceFee,\\n        bytes32 gaslane,\\n        uint64 subscriptionID,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        immut_entranceFee = entranceFee;\\n        immut_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        immut_gaslane = gaslane;\\n        immut_subscriptionID = subscriptionID;\\n        immut_callbackGasLimit = callbackGasLimit;\\n        stored_lotteryState = LotteryState.OPEN;\\n        stored_lastTime = block.timestamp;\\n        immut_interval = interval;\\n    }\\n\\n    function enterLottery() public payable {\\n        //must be msg.value > minimum fee, or prints not enough\\n        if (msg.value < immut_entranceFee) {\\n            revert Er_NotEnoughETH_ENTERED();\\n        }\\n        if (stored_lotteryState != LotteryState.OPEN) {\\n            revert LotteryNOTOPEN();\\n        }\\n\\n        s_customers.push(payable(msg.sender));\\n\\n        //\\ufffd\\u033a\\ufffd\\u01ae...\\n        emit LotteryEnter(msg.sender);\\n    }\\n\\n    //chainlink keeper \\ufffd\\ufffd\\ufffd\\n    //upkeepNeed\\ufffd\\ufffd \\u00e3\\ufffd\\ufffd true \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\u0634\\ufffd\\n    //\\ufffd\\ufffd\\ufffd\\ufffd true\\ufffd\\ufffd\\n    function checkUpkeep(\\n        bytes memory\\n    ) public override returns (bool upkeepRequired, bytes memory) {\\n        bool isOpen = LotteryState.OPEN == stored_lotteryState;\\n        //current time - previous time\\n        bool timePassed = ((block.timestamp - stored_lastTime) >\\n            immut_interval);\\n        bool hasCustomers = (s_customers.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n\\n        //\\ufffd\\ufffd\\ufffd\\ufffd upkeepRequired false\\ufffd\\u0338\\ufffd lottery \\ufffd\\u00f0\\ufffd\\ufffd\\ufffd \\ufffd\\u01b4\\ufffd\\n        upkeepRequired = (isOpen && timePassed && hasCustomers && hasBalance);\\n    }\\n\\n    function performUpkeep(bytes calldata) external override {\\n        (bool upkeepRequired, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepRequired) {\\n            revert UPKEEPNOTREQUIRED(\\n                address(this).balance,\\n                s_customers.length,\\n                uint256(stored_lotteryState)\\n            );\\n        }\\n\\n        //request vrf\\n        // random number generated\\n        stored_lotteryState = LotteryState.OPEN;\\n\\n        uint256 requestID = immut_vrfCoordinator.requestRandomWords(\\n            immut_gaslane, //gaslane\\n            immut_subscriptionID,\\n            REQEUST_CONFIRMATIONS,\\n            immut_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestLotteryWinner(requestID);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestID,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        //s_customers size 10\\n        uint256 indexWinner = randomWords[0] % s_customers.length;\\n        address payable recentWinner = s_customers[indexWinner]; //\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\n        stored_lotteryState = LotteryState.OPEN;\\n        s_customers = new address payable[](0); //resetting the lottery & customer\\n        stored_lastTime = block.timestamp;\\n\\n        stored_recentWinner = recentWinner;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n\\n        //must require success\\n        if (!success) {\\n            revert TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /*view / pure functions */\\n    function getEntranceFee() public view returns (uint256) {}\\n\\n    //\\ufffd\\u0574\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\u03b8\\ufffd\\ufffd\\ufffd\\n    function getCustomer(uint256 index) public view returns (address) {\\n        return s_customers[index];\\n    }\\n\\n    //\\ufffd\\u05b1\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\u03b8\\ufffd\\ufffd\\ufffd\\n    function getRecentWinner() public view returns (address) {\\n        return stored_recentWinner;\\n    }\\n\\n    function getLotteryState() public view returns (LotteryState) {\\n        return stored_lotteryState;\\n    }\\n\\n    function getNumWords() public returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_customers.length;\\n    }\\n\\n    function getLatestTimeStamp() public view returns (uint256) {\\n        return stored_lastTime;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQEUST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return immut_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x5bfd9112af36d94b60254a8e46fe76268f15d4e5f016b79dac68526b35d59eff\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001809380380620018098339818101604052810190620000389190620002a0565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff021916908360018111156200011957620001186200033c565b5b0217905550426002819055508061014081815250505050505050506200036b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200016c826200013f565b9050919050565b6200017e816200015f565b81146200018a57600080fd5b50565b6000815190506200019e8162000173565b92915050565b6000819050919050565b620001b981620001a4565b8114620001c557600080fd5b50565b600081519050620001d981620001ae565b92915050565b6000819050919050565b620001f481620001df565b81146200020057600080fd5b50565b6000815190506200021481620001e9565b92915050565b600067ffffffffffffffff82169050919050565b62000239816200021a565b81146200024557600080fd5b50565b60008151905062000259816200022e565b92915050565b600063ffffffff82169050919050565b6200027a816200025f565b81146200028657600080fd5b50565b6000815190506200029a816200026f565b92915050565b60008060008060008060c08789031215620002c057620002bf6200013a565b5b6000620002d089828a016200018d565b9650506020620002e389828a01620001c8565b9550506040620002f689828a0162000203565b94505060606200030989828a0162000248565b93505060806200031c89828a0162000289565b92505060a06200032f89828a01620001c8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c61014051611429620003e06000396000818161066501526106d3015260006104fd015260006104da015260006104b90152600061047d015260006106f90152600081816102fd015261035101526114296000f3fe6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b414610259578063c1af578514610284578063eb876f271461028e578063fd6673f5146102cb576100c2565b80635f1b0fd8146101c55780636b68c03c146101f05780636e04ff0d1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610baa565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d5e565b6102fb565b005b34801561012757600080fd5b506101306103bb565b60405161013d9190610baa565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e15565b6103c5565b005b34801561017b57600080fd5b506101846105c5565b6040516101919190610ea3565b60405180910390f35b3480156101a657600080fd5b506101af6105ef565b6040516101bc9190610baa565b60405180910390f35b3480156101d157600080fd5b506101da6105fe565b6040516101e79190610baa565b60405180910390f35b3480156101fc57600080fd5b5061020561060b565b6040516102129190610f35565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190611005565b610622565b6040516102509291906110f1565b60405180910390f35b34801561026557600080fd5b5061026e6106cf565b60405161027b9190610baa565b60405180910390f35b61028c6106f7565b005b34801561029a57600080fd5b506102b560048036038101906102b09190611121565b610866565b6040516102c29190610ea3565b60405180910390f35b3480156102d757600080fd5b506102e06108ad565b6040516102ed9190610baa565b60405180910390f35b600090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ad57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103a492919061114e565b60405180910390fd5b6103b782826108b9565b5050565b6000600254905090565b60006103df60405180602001604052806000815250610622565b5090508061044e5747600080549050600160149054906101000a900460ff1660018111156104105761040f610ebe565b5b6040517fdedce2f600000000000000000000000000000000000000000000000000000000815260040161044593929190611177565b60405180910390fd5b6000600160146101000a81548160ff0219169083600181111561047457610473610ebe565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161053e959493929190611226565b602060405180830381600087803b15801561055857600080fd5b505af115801561056c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610590919061128e565b9050807feddaba8a57dcfd3a637ac76edea7af81443028e0bd6e6cb23bd210a4a85ba85660405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff16600181111561064a57610649610ebe565b5b6000600181111561065e5761065d610ebe565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261069291906112ea565b119050600080600080549050119050600080471190508380156106b25750825b80156106bb5750815b80156106c45750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610751576040517fe3fb549500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561076557610764610ebe565b5b600160149054906101000a900460ff16600181111561078757610786610ebe565b5b146107be576040517f5c306e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b600080828154811061087b5761087a61131e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108d4576108d361131e565b5b60200260200101516108e6919061137c565b905060008082815481106108fd576108fc61131e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160146101000a81548160ff021916908360018111156109505761094f610ebe565b5b0217905550600067ffffffffffffffff8111156109705761096f610c1b565b5b60405190808252806020026020018201604052801561099e5781602001602082028036833780820191505090505b50600090805190602001906109b4929190610aea565b504260028190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a23906113de565b60006040518083038185875af1925050503d8060008114610a60576040519150601f19603f3d011682016040523d82523d6000602084013e610a65565b606091505b5050905080610aa0576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b63579160200282015b82811115610b625782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b0a565b5b509050610b709190610b74565b5090565b5b80821115610b8d576000816000905550600101610b75565b5090565b6000819050919050565b610ba481610b91565b82525050565b6000602082019050610bbf6000830184610b9b565b92915050565b6000604051905090565b600080fd5b600080fd5b610be281610b91565b8114610bed57600080fd5b50565b600081359050610bff81610bd9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c5382610c0a565b810181811067ffffffffffffffff82111715610c7257610c71610c1b565b5b80604052505050565b6000610c85610bc5565b9050610c918282610c4a565b919050565b600067ffffffffffffffff821115610cb157610cb0610c1b565b5b602082029050602081019050919050565b600080fd5b6000610cda610cd584610c96565b610c7b565b90508083825260208201905060208402830185811115610cfd57610cfc610cc2565b5b835b81811015610d265780610d128882610bf0565b845260208401935050602081019050610cff565b5050509392505050565b600082601f830112610d4557610d44610c05565b5b8135610d55848260208601610cc7565b91505092915050565b60008060408385031215610d7557610d74610bcf565b5b6000610d8385828601610bf0565b925050602083013567ffffffffffffffff811115610da457610da3610bd4565b5b610db085828601610d30565b9150509250929050565b600080fd5b60008083601f840112610dd557610dd4610c05565b5b8235905067ffffffffffffffff811115610df257610df1610dba565b5b602083019150836001820283011115610e0e57610e0d610cc2565b5b9250929050565b60008060208385031215610e2c57610e2b610bcf565b5b600083013567ffffffffffffffff811115610e4a57610e49610bd4565b5b610e5685828601610dbf565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e8d82610e62565b9050919050565b610e9d81610e82565b82525050565b6000602082019050610eb86000830184610e94565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610efe57610efd610ebe565b5b50565b6000819050610f0f82610eed565b919050565b6000610f1f82610f01565b9050919050565b610f2f81610f14565b82525050565b6000602082019050610f4a6000830184610f26565b92915050565b600080fd5b600067ffffffffffffffff821115610f7057610f6f610c1b565b5b610f7982610c0a565b9050602081019050919050565b82818337600083830152505050565b6000610fa8610fa384610f55565b610c7b565b905082815260208101848484011115610fc457610fc3610f50565b5b610fcf848285610f86565b509392505050565b600082601f830112610fec57610feb610c05565b5b8135610ffc848260208601610f95565b91505092915050565b60006020828403121561101b5761101a610bcf565b5b600082013567ffffffffffffffff81111561103957611038610bd4565b5b61104584828501610fd7565b91505092915050565b60008115159050919050565b6110638161104e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110a3578082015181840152602081019050611088565b838111156110b2576000848401525b50505050565b60006110c382611069565b6110cd8185611074565b93506110dd818560208601611085565b6110e681610c0a565b840191505092915050565b6000604082019050611106600083018561105a565b818103602083015261111881846110b8565b90509392505050565b60006020828403121561113757611136610bcf565b5b600061114584828501610bf0565b91505092915050565b60006040820190506111636000830185610e94565b6111706020830184610e94565b9392505050565b600060608201905061118c6000830186610b9b565b6111996020830185610b9b565b6111a66040830184610b9b565b949350505050565b6000819050919050565b6111c1816111ae565b82525050565b600067ffffffffffffffff82169050919050565b6111e4816111c7565b82525050565b600061ffff82169050919050565b611201816111ea565b82525050565b600063ffffffff82169050919050565b61122081611207565b82525050565b600060a08201905061123b60008301886111b8565b61124860208301876111db565b61125560408301866111f8565b6112626060830185611217565b61126f6080830184611217565b9695505050505050565b60008151905061128881610bd9565b92915050565b6000602082840312156112a4576112a3610bcf565b5b60006112b284828501611279565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112f582610b91565b915061130083610b91565b925082821015611313576113126112bb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061138782610b91565b915061139283610b91565b9250826113a2576113a161134d565b5b828206905092915050565b600081905092915050565b50565b60006113c86000836113ad565b91506113d3826113b8565b600082019050919050565b60006113e9826113bb565b915081905091905056fea2646970667358221220a56ff05f24d789ada736407107b0eab1241ab5c87f5b70c4447c30000ac7faa264736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80635f1b0fd81161007f57806391ad27b41161005957806391ad27b414610259578063c1af578514610284578063eb876f271461028e578063fd6673f5146102cb576100c2565b80635f1b0fd8146101c55780636b68c03c146101f05780636e04ff0d1461021b576100c2565b806309bc33a7146100c75780631fe543e3146100f2578063320229eb1461011b5780634585e33b14610146578063473f1ddc1461016f57806353a2c19a1461019a575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610baa565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610d5e565b6102fb565b005b34801561012757600080fd5b506101306103bb565b60405161013d9190610baa565b60405180910390f35b34801561015257600080fd5b5061016d60048036038101906101689190610e15565b6103c5565b005b34801561017b57600080fd5b506101846105c5565b6040516101919190610ea3565b60405180910390f35b3480156101a657600080fd5b506101af6105ef565b6040516101bc9190610baa565b60405180910390f35b3480156101d157600080fd5b506101da6105fe565b6040516101e79190610baa565b60405180910390f35b3480156101fc57600080fd5b5061020561060b565b6040516102129190610f35565b60405180910390f35b34801561022757600080fd5b50610242600480360381019061023d9190611005565b610622565b6040516102509291906110f1565b60405180910390f35b34801561026557600080fd5b5061026e6106cf565b60405161027b9190610baa565b60405180910390f35b61028c6106f7565b005b34801561029a57600080fd5b506102b560048036038101906102b09190611121565b610866565b6040516102c29190610ea3565b60405180910390f35b3480156102d757600080fd5b506102e06108ad565b6040516102ed9190610baa565b60405180910390f35b600090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ad57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103a492919061114e565b60405180910390fd5b6103b782826108b9565b5050565b6000600254905090565b60006103df60405180602001604052806000815250610622565b5090508061044e5747600080549050600160149054906101000a900460ff1660018111156104105761040f610ebe565b5b6040517fdedce2f600000000000000000000000000000000000000000000000000000000815260040161044593929190611177565b60405180910390fd5b6000600160146101000a81548160ff0219169083600181111561047457610473610ebe565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161053e959493929190611226565b602060405180830381600087803b15801561055857600080fd5b505af115801561056c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610590919061128e565b9050807feddaba8a57dcfd3a637ac76edea7af81443028e0bd6e6cb23bd210a4a85ba85660405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b600060606000600160149054906101000a900460ff16600181111561064a57610649610ebe565b5b6000600181111561065e5761065d610ebe565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261069291906112ea565b119050600080600080549050119050600080471190508380156106b25750825b80156106bb5750815b80156106c45750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f0000000000000000000000000000000000000000000000000000000000000000341015610751576040517fe3fb549500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561076557610764610ebe565b5b600160149054906101000a900460ff16600181111561078757610786610ebe565b5b146107be576040517f5c306e7800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d64fb5ba9f2548c5b98468d58f25b87b9e866afee0122e92d9fe722bf85076c60405160405180910390a2565b600080828154811061087b5761087a61131e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108d4576108d361131e565b5b60200260200101516108e6919061137c565b905060008082815481106108fd576108fc61131e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160146101000a81548160ff021916908360018111156109505761094f610ebe565b5b0217905550600067ffffffffffffffff8111156109705761096f610c1b565b5b60405190808252806020026020018201604052801561099e5781602001602082028036833780820191505090505b50600090805190602001906109b4929190610aea565b504260028190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a23906113de565b60006040518083038185875af1925050503d8060008114610a60576040519150601f19603f3d011682016040523d82523d6000602084013e610a65565b606091505b5050905080610aa0576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b63579160200282015b82811115610b625782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b0a565b5b509050610b709190610b74565b5090565b5b80821115610b8d576000816000905550600101610b75565b5090565b6000819050919050565b610ba481610b91565b82525050565b6000602082019050610bbf6000830184610b9b565b92915050565b6000604051905090565b600080fd5b600080fd5b610be281610b91565b8114610bed57600080fd5b50565b600081359050610bff81610bd9565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c5382610c0a565b810181811067ffffffffffffffff82111715610c7257610c71610c1b565b5b80604052505050565b6000610c85610bc5565b9050610c918282610c4a565b919050565b600067ffffffffffffffff821115610cb157610cb0610c1b565b5b602082029050602081019050919050565b600080fd5b6000610cda610cd584610c96565b610c7b565b90508083825260208201905060208402830185811115610cfd57610cfc610cc2565b5b835b81811015610d265780610d128882610bf0565b845260208401935050602081019050610cff565b5050509392505050565b600082601f830112610d4557610d44610c05565b5b8135610d55848260208601610cc7565b91505092915050565b60008060408385031215610d7557610d74610bcf565b5b6000610d8385828601610bf0565b925050602083013567ffffffffffffffff811115610da457610da3610bd4565b5b610db085828601610d30565b9150509250929050565b600080fd5b60008083601f840112610dd557610dd4610c05565b5b8235905067ffffffffffffffff811115610df257610df1610dba565b5b602083019150836001820283011115610e0e57610e0d610cc2565b5b9250929050565b60008060208385031215610e2c57610e2b610bcf565b5b600083013567ffffffffffffffff811115610e4a57610e49610bd4565b5b610e5685828601610dbf565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e8d82610e62565b9050919050565b610e9d81610e82565b82525050565b6000602082019050610eb86000830184610e94565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610efe57610efd610ebe565b5b50565b6000819050610f0f82610eed565b919050565b6000610f1f82610f01565b9050919050565b610f2f81610f14565b82525050565b6000602082019050610f4a6000830184610f26565b92915050565b600080fd5b600067ffffffffffffffff821115610f7057610f6f610c1b565b5b610f7982610c0a565b9050602081019050919050565b82818337600083830152505050565b6000610fa8610fa384610f55565b610c7b565b905082815260208101848484011115610fc457610fc3610f50565b5b610fcf848285610f86565b509392505050565b600082601f830112610fec57610feb610c05565b5b8135610ffc848260208601610f95565b91505092915050565b60006020828403121561101b5761101a610bcf565b5b600082013567ffffffffffffffff81111561103957611038610bd4565b5b61104584828501610fd7565b91505092915050565b60008115159050919050565b6110638161104e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110a3578082015181840152602081019050611088565b838111156110b2576000848401525b50505050565b60006110c382611069565b6110cd8185611074565b93506110dd818560208601611085565b6110e681610c0a565b840191505092915050565b6000604082019050611106600083018561105a565b818103602083015261111881846110b8565b90509392505050565b60006020828403121561113757611136610bcf565b5b600061114584828501610bf0565b91505092915050565b60006040820190506111636000830185610e94565b6111706020830184610e94565b9392505050565b600060608201905061118c6000830186610b9b565b6111996020830185610b9b565b6111a66040830184610b9b565b949350505050565b6000819050919050565b6111c1816111ae565b82525050565b600067ffffffffffffffff82169050919050565b6111e4816111c7565b82525050565b600061ffff82169050919050565b611201816111ea565b82525050565b600063ffffffff82169050919050565b61122081611207565b82525050565b600060a08201905061123b60008301886111b8565b61124860208301876111db565b61125560408301866111f8565b6112626060830185611217565b61126f6080830184611217565b9695505050505050565b60008151905061128881610bd9565b92915050565b6000602082840312156112a4576112a3610bcf565b5b60006112b284828501611279565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112f582610b91565b915061130083610b91565b925082821015611313576113126112bb565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061138782610b91565b915061139283610b91565b9250826113a2576113a161134d565b5b828206905092915050565b600081905092915050565b50565b60006113c86000836113ad565b91506113d3826113b8565b600082019050919050565b60006113e9826113bb565b915081905091905056fea2646970667358221220a56ff05f24d789ada736407107b0eab1241ab5c87f5b70c4447c30000ac7faa264736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 207,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_customers",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 224,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "stored_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 227,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "stored_lotteryState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(LotteryState)202"
      },
      {
        "astId": 229,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "stored_lastTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)202": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}